// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items(
    order_id,
    chrt_id,
    track_number,
    price,
    rid,
    name,
    sale,
    size,
    total_price,
    nm_id,
    brand,
    status
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, order_id, chrt_id, track_number, price, rid, name, sale, size, total_price, nm_id, brand, status
`

type CreateItemParams struct {
	OrderID     string
	ChrtID      int32
	TrackNumber string
	Price       decimal.Decimal
	Rid         string
	Name        string
	Sale        decimal.Decimal
	Size        string
	TotalPrice  decimal.Decimal
	NmID        int32
	Brand       string
	Status      int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.OrderID,
		arg.ChrtID,
		arg.TrackNumber,
		arg.Price,
		arg.Rid,
		arg.Name,
		arg.Sale,
		arg.Size,
		arg.TotalPrice,
		arg.NmID,
		arg.Brand,
		arg.Status,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ChrtID,
		&i.TrackNumber,
		&i.Price,
		&i.Rid,
		&i.Name,
		&i.Sale,
		&i.Size,
		&i.TotalPrice,
		&i.NmID,
		&i.Brand,
		&i.Status,
	)
	return i, err
}

const getItemsByOrderID = `-- name: GetItemsByOrderID :many
SELECT id, order_id, chrt_id, track_number, price, rid, name, sale, size, total_price, nm_id, brand, status
FROM items
WHERE order_id = $1
`

func (q *Queries) GetItemsByOrderID(ctx context.Context, orderID string) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ChrtID,
			&i.TrackNumber,
			&i.Price,
			&i.Rid,
			&i.Name,
			&i.Sale,
			&i.Size,
			&i.TotalPrice,
			&i.NmID,
			&i.Brand,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
