// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id,
    track_number,
    entry,
    locale,
    internal_signature,
    customer_id,
    delivery_service,
    shardkey,
    sm_id,
    date_created,
    oof_shard,
    delivery_name,
    delivery_phone,
    delivery_zip,
    delivery_address,
    delivery_region,
    delivery_email,
    delivery_city
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
RETURNING id, track_number, entry, locale, internal_signature, customer_id, delivery_service, shardkey, sm_id, date_created, oof_shard, delivery_name, delivery_city, delivery_phone, delivery_zip, delivery_address, delivery_region, delivery_email
`

type CreateOrderParams struct {
	ID                string
	TrackNumber       string
	Entry             string
	Locale            string
	InternalSignature string
	CustomerID        string
	DeliveryService   string
	Shardkey          string
	SmID              int32
	DateCreated       time.Time
	OofShard          string
	DeliveryName      string
	DeliveryPhone     string
	DeliveryZip       string
	DeliveryAddress   string
	DeliveryRegion    string
	DeliveryEmail     string
	DeliveryCity      string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.TrackNumber,
		arg.Entry,
		arg.Locale,
		arg.InternalSignature,
		arg.CustomerID,
		arg.DeliveryService,
		arg.Shardkey,
		arg.SmID,
		arg.DateCreated,
		arg.OofShard,
		arg.DeliveryName,
		arg.DeliveryPhone,
		arg.DeliveryZip,
		arg.DeliveryAddress,
		arg.DeliveryRegion,
		arg.DeliveryEmail,
		arg.DeliveryCity,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrackNumber,
		&i.Entry,
		&i.Locale,
		&i.InternalSignature,
		&i.CustomerID,
		&i.DeliveryService,
		&i.Shardkey,
		&i.SmID,
		&i.DateCreated,
		&i.OofShard,
		&i.DeliveryName,
		&i.DeliveryCity,
		&i.DeliveryPhone,
		&i.DeliveryZip,
		&i.DeliveryAddress,
		&i.DeliveryRegion,
		&i.DeliveryEmail,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, track_number, entry, locale, internal_signature, customer_id, delivery_service, shardkey, sm_id, date_created, oof_shard, delivery_name, delivery_city, delivery_phone, delivery_zip, delivery_address, delivery_region, delivery_email
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrackNumber,
		&i.Entry,
		&i.Locale,
		&i.InternalSignature,
		&i.CustomerID,
		&i.DeliveryService,
		&i.Shardkey,
		&i.SmID,
		&i.DateCreated,
		&i.OofShard,
		&i.DeliveryName,
		&i.DeliveryCity,
		&i.DeliveryPhone,
		&i.DeliveryZip,
		&i.DeliveryAddress,
		&i.DeliveryRegion,
		&i.DeliveryEmail,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
    track_number = $2,
    entry = $3,
    locale = $4,
    internal_signature = $5,
    customer_id = $6,
    delivery_service = $7,
    shardkey = $8,
    sm_id = $9,
    date_created = $10,
    oof_shard = $11,
    delivery_name = $12,
    delivery_phone = $13,
    delivery_zip = $14,
    delivery_address = $15,
    delivery_region = $16,
    delivery_email = $17,
    delivery_city = $18
WHERE id = $1
RETURNING id, track_number, entry, locale, internal_signature, customer_id, delivery_service, shardkey, sm_id, date_created, oof_shard, delivery_name, delivery_city, delivery_phone, delivery_zip, delivery_address, delivery_region, delivery_email
`

type UpdateOrderParams struct {
	ID                string
	TrackNumber       string
	Entry             string
	Locale            string
	InternalSignature string
	CustomerID        string
	DeliveryService   string
	Shardkey          string
	SmID              int32
	DateCreated       time.Time
	OofShard          string
	DeliveryName      string
	DeliveryPhone     string
	DeliveryZip       string
	DeliveryAddress   string
	DeliveryRegion    string
	DeliveryEmail     string
	DeliveryCity      string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.TrackNumber,
		arg.Entry,
		arg.Locale,
		arg.InternalSignature,
		arg.CustomerID,
		arg.DeliveryService,
		arg.Shardkey,
		arg.SmID,
		arg.DateCreated,
		arg.OofShard,
		arg.DeliveryName,
		arg.DeliveryPhone,
		arg.DeliveryZip,
		arg.DeliveryAddress,
		arg.DeliveryRegion,
		arg.DeliveryEmail,
		arg.DeliveryCity,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrackNumber,
		&i.Entry,
		&i.Locale,
		&i.InternalSignature,
		&i.CustomerID,
		&i.DeliveryService,
		&i.Shardkey,
		&i.SmID,
		&i.DateCreated,
		&i.OofShard,
		&i.DeliveryName,
		&i.DeliveryCity,
		&i.DeliveryPhone,
		&i.DeliveryZip,
		&i.DeliveryAddress,
		&i.DeliveryRegion,
		&i.DeliveryEmail,
	)
	return i, err
}
