// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments(
    transaction,
    order_id,
    request_id,
    currency,
    provider,
    amount,
    payment_dt,
    bank,
    delivery_cost,
    goods_total,
    custom_fee
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING transaction, order_id, request_id, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee
`

type CreatePaymentParams struct {
	Transaction  string
	OrderID      string
	RequestID    string
	Currency     string
	Provider     string
	Amount       decimal.Decimal
	PaymentDt    int64
	Bank         string
	DeliveryCost decimal.Decimal
	GoodsTotal   int32
	CustomFee    decimal.Decimal
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.Transaction,
		arg.OrderID,
		arg.RequestID,
		arg.Currency,
		arg.Provider,
		arg.Amount,
		arg.PaymentDt,
		arg.Bank,
		arg.DeliveryCost,
		arg.GoodsTotal,
		arg.CustomFee,
	)
	var i Payment
	err := row.Scan(
		&i.Transaction,
		&i.OrderID,
		&i.RequestID,
		&i.Currency,
		&i.Provider,
		&i.Amount,
		&i.PaymentDt,
		&i.Bank,
		&i.DeliveryCost,
		&i.GoodsTotal,
		&i.CustomFee,
	)
	return i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT transaction, order_id, request_id, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee FROM payments
WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.Transaction,
		&i.OrderID,
		&i.RequestID,
		&i.Currency,
		&i.Provider,
		&i.Amount,
		&i.PaymentDt,
		&i.Bank,
		&i.DeliveryCost,
		&i.GoodsTotal,
		&i.CustomFee,
	)
	return i, err
}
