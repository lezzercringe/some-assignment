// Code generated by MockGen. DO NOT EDIT.
// Source: internal/orders/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/orders/repository.go -destination internal/mocks/repository.go -package mocks OrdersRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	orders "order-persistor/internal/orders"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, o *orders.Order) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, o)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, o)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id string) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// ListRecent mocks base method.
func (m *MockRepository) ListRecent(ctx context.Context, n int) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecent", ctx, n)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecent indicates an expected call of ListRecent.
func (mr *MockRepositoryMockRecorder) ListRecent(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecent", reflect.TypeOf((*MockRepository)(nil).ListRecent), ctx, n)
}
