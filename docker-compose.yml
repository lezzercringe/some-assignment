services:
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    restart: unless-stopped
    ports:
      - 9092:9092
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  migrations_runner:
    build: ./migrations-runner/
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://postgres:development@db:5432/postgres

  frontend:
    build: 
      context: ./frontend
      args:
        API_URL: http://api.localhost:80
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  service:
    build:
      context: ./order-persistor
    restart: unless-stopped
    depends_on:
      migrations_runner:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.service.entrypoints=web"
      - "traefik.http.routers.service.rule=Host(`api.localhost`)"
      - "traefik.http.services.service.loadbalancer.server.port=80"

  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: development
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  producer:
    build: ./producer
    restart: unless-stopped
    depends_on:
      - broker
    labels:
      - "traefik.enable=false"